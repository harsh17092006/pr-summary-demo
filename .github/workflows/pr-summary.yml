name: AI PR Summary

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  ai-pr-summary:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install requests

      - name: Generate AI PR Summary and update PR description
        env:
          GH_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          import os
          import requests

          GH_TOKEN = os.environ['GH_TOKEN']
          GROQ_API_KEY = os.environ['GROQ_API_KEY']
          REPO = os.environ['GITHUB_REPOSITORY']
          PR_NUMBER = os.environ['PR_NUMBER']

          # Get PR details
          pr_url = f"https://api.github.com/repos/{REPO}/pulls/{PR_NUMBER}"
          headers = {
              "Authorization": f"token {GH_TOKEN}",
              "Accept": "application/vnd.github.v3+json"
          }
          pr = requests.get(pr_url, headers=headers).json()

          # Get list of changed files
          files_url = f"https://api.github.com/repos/{REPO}/pulls/{PR_NUMBER}/files"
          files = requests.get(files_url, headers=headers).json()

          summaries = []
          for file in files:
              filename = file['filename']
              patch = file.get('patch', '')
              if patch:
                  prompt = (
                      f"You are an expert AI tasked with generating a detailed pull request description summarizing code changes in '{filename}'. "
                      "Analyze the provided git diff patch and produce a concise, professional summary focusing solely on substantive code changes, "
                      "ignoring metadata, formatting, or stylistic modifications (e.g., whitespace, comments, or variable renaming unless functionally significant). "
                      "Structure the summary with bullet points under the following sections:\n\n"
                      "- **Changes**: List specific code changes, such as added, removed, or modified functions, classes, methods, variables, or logic. "
                      "Describe what was altered in each case (e.g., new parameters, changed conditions).\n"
                      "- **Purpose**: Explain the overall intent or goal of these changes (e.g., adding a feature, fixing a bug, optimizing performance).\n"
                      "- **Impact**: Describe the expected effects on the codebase, such as new functionality, improved performance, enhanced reliability, "
                      "or changes in user experience. Mention any affected modules, dependencies, or APIs.\n"
                      "- **Risks and Considerations**: Highlight potential risks (e.g., backward compatibility, performance degradation), edge cases, "
                      "or dependencies that reviewers should verify. Note any required testing or follow-up actions.\n\n"
                      "Keep the summary clear, concise (150-300 words), and tailored for technical reviewers. Use a neutral, professional tone and avoid speculative language. "
                      "Here is the git diff patch to analyze:\n\n"
                      f"{patch}"
                  )
                  groq_response = requests.post(
                      "https://api.groq.com/openai/v1/chat/completions",
                      headers={
                          "Authorization": f"Bearer {GROQ_API_KEY}",
                          "Content-Type": "application/json"
                      },
                      json={
                          "model": "llama3-70b-8192",
                          "messages": [
                              {"role": "system", "content": "You are a helpful assistant that summarizes code changes in pull requests."},
                              {"role": "user", "content": prompt}
                          ],
                          "max_tokens": 1024,  # <-- Increased from 256 to 1024
                          "temperature": 0.4
                      }
                  )
                  result = groq_response.json()
                  ai_summary = result['choices'][0]['message']['content'].strip()
                  summaries.append(f"**{filename}**\n{ai_summary}")

          summary_text = "\n\n".join(summaries) if summaries else "No code changes detected for AI summary."

          # Update PR description
          patch = {
              "body": f"### AI-generated Summary of Code Changes\n\n{summary_text}\n\n---\n*This summary was generated by Groq Llama3-70B.*"
          }
          requests.patch(pr_url, headers=headers, json=patch)

        shell: python

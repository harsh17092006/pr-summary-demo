name: AI PR Summary

on:
  pull_request:
    types: [opened]

jobs:
  generate_summary:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for accurate diff

      - name: Install GitHub CLI and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Verify jq and gh Installation
        run: |
          jq --version
          gh --version

      - name: Verify GROQ_API_KEY
        run: |
          if [[ -z "${GROQ_API_KEY}" ]]; then
            echo "‚ùå GROQ_API_KEY is not set in GitHub Secrets."
            exit 1
          fi
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}

      - name: Generate AI Summary
        run: |
          #!/bin/bash
          set -euo pipefail
          set -x

          # Clean up temporary files on exit, excluding summary.txt
          trap 'rm -f pr_diff.txt response_body.txt response_debug.txt fetch_output.log' EXIT

          # Check dependencies
          command -v jq >/dev/null || { echo "‚ùå jq not installed."; exit 1; }
          command -v gh >/dev/null || { echo "‚ùå gh not installed."; exit 1; }
          [[ -n "${GROQ_API_KEY:-}" && "${#GROQ_API_KEY}" -ge 10 ]] || { echo "‚ùå GROQ_API_KEY invalid or missing."; exit 1; }

          # Debug: Log Git and PR info
          echo "‚ÑπÔ∏è Git remote info:"
          git remote -v
          echo "‚ÑπÔ∏è Current branch:"
          git rev-parse --abbrev-ref HEAD
          echo "‚ÑπÔ∏è PR head SHA: ${{ github.event.pull_request.head.sha }}"
          echo "‚ÑπÔ∏è PR base branch: ${{ github.event.pull_request.base.ref }}"

          # Get default branch from GitHub Actions context
          DEFAULT_BRANCH="${{ github.event.pull_request.base.ref }}"
          if [[ -z "$DEFAULT_BRANCH" ]]; then
            echo "‚ö†Ô∏è Could not get base branch from GitHub context, falling back to main."
            DEFAULT_BRANCH="main"
          fi
          echo "‚ÑπÔ∏è Default branch: $DEFAULT_BRANCH"

          # Fetch default branch
          echo "‚ÑπÔ∏è Fetching origin/$DEFAULT_BRANCH"
          git fetch origin "$DEFAULT_BRANCH" 2>&1 | tee fetch_output.log || { echo "‚ùå Failed to fetch origin/$DEFAULT_BRANCH."; cat fetch_output.log; exit 1; }
          git show-ref --verify --quiet refs/remotes/origin/"$DEFAULT_BRANCH" || { echo "‚ùå Branch origin/$DEFAULT_BRANCH not found."; exit 1; }

          # Handle detached HEAD state
          if [[ $(git rev-parse --abbrev-ref HEAD) == "HEAD" ]]; then
            echo "‚ÑπÔ∏è Detached HEAD detected, checking out PR commit."
            git checkout "${{ github.event.pull_request.head.sha }}" || { echo "‚ùå Failed to checkout PR commit."; exit 1; }
          fi

          # Generate diff
          echo "‚ÑπÔ∏è Generating diff against origin/$DEFAULT_BRANCH"
          if git merge-base origin/"$DEFAULT_BRANCH" HEAD >/dev/null; then
            git diff origin/"$DEFAULT_BRANCH"...HEAD > pr_diff.txt || { echo "‚ùå Failed to generate diff."; exit 1; }
          else
            echo "‚ö†Ô∏è No merge base found. Generating full diff."
            git diff > pr_diff.txt || { echo "‚ùå Failed to generate full diff."; exit 1; }
          fi

          # Debug: Check diff file
          echo "‚ÑπÔ∏è pr_diff.txt contents:"
          if [[ -f pr_diff.txt ]]; then
            cat pr_diff.txt
          else
            echo "‚ö†Ô∏è pr_diff.txt is missing."
          fi

          # Handle empty diff
          if [[ ! -s pr_diff.txt ]]; then
            echo "No code changes detected in the pull request." > summary.txt
            echo "‚úÖ Summary generated (no changes)."
            exit 0
          fi

          # Process diff (truncate to 500 lines to avoid API limits)
          if [[ $(wc -l < pr_diff.txt) -gt 500 ]]; then
            echo "‚ö†Ô∏è Diff exceeds 500 lines; truncating."
            DIFF=$(head -n 500 pr_diff.txt | iconv -c -t utf-8)
          else
            DIFF=$(iconv -c -t utf-8 < pr_diff.txt)
          fi
          [[ -n "$DIFF" ]] || { echo "‚ùå iconv produced empty output."; exit 1; }

          # Convert to JSON
          DIFF_JSON=$(echo "$DIFF" | jq -Rs .) || { echo "‚ùå jq processing failed."; exit 1; }

          # Prepare API payload
          MODEL="llama3-70b-8192"
          DATA=$(jq -n --arg model "$MODEL" --arg diff "$DIFF" \
            '{ "model": $model, "messages": [ { "role": "system", "content": "You are an expert AI that summarizes GitHub pull request diffs into clean, concise summaries for reviewers. Focus on what was changed inside the code or files, not on filenames or metadata." }, { "role": "user", "content": $diff } ] }')

          # Make API request with retries
          for attempt in {1..3}; do
            RESPONSE=$(curl -s -w "%{http_code}" https://api.groq.com/openai/v1/chat/completions \
              -H "Authorization: Bearer $GROQ_API_KEY" \
              -H "Content-Type: application/json" \
              -d "$DATA" -o response_body.txt)
            if [[ "$RESPONSE" == "429" ]]; then
              echo "‚ö†Ô∏è Rate limit hit, retrying ($attempt/3)..."
              sleep $((attempt * 5))
              continue
            fi
            break
          done
          if [[ "$RESPONSE" != "200" ]]; then
            echo "‚ùå API request failed (status $RESPONSE): $(cat response_body.txt)"
            echo "‚ö†Ô∏è Generating fallback summary."
            echo "Unable to generate AI summary due to API failure." > summary.txt
            exit 0
          fi
          RESPONSE=$(cat response_body.txt)

          # Save response for debugging
          echo "$RESPONSE" > response_debug.txt
          echo "‚ÑπÔ∏è API response saved to response_debug.txt"

          # Extract summary
          if ! echo "$RESPONSE" | jq -e '.choices[0].message.content' >/dev/null; then
            echo "‚ùå Invalid API response: $RESPONSE"
            echo "‚ö†Ô∏è Generating fallback summary."
            echo "Unable to generate AI summary due to invalid API response." > summary.txt
            exit 0
          fi
          SUMMARY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // empty')
          [[ -n "$SUMMARY" && "$SUMMARY" != "null" ]] || { echo "‚ùå Empty summary in API response."; echo "Unable to generate AI summary due to empty response." > summary.txt; exit 0; }

          # Save summary
          echo "$SUMMARY" > summary.txt
          echo "‚úÖ AI Summary generated."
          echo "‚ÑπÔ∏è summary.txt contents:"
          cat summary.txt
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          GH_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Debug: Verify summary.txt
        run: |
          if [[ -f summary.txt ]]; then
            echo "‚ÑπÔ∏è summary.txt exists with contents:"
            cat summary.txt
          else
            echo "‚ùå summary.txt does not exist."
          fi

      - name: Update PR description
        run: |
          if [[ ! -f summary.txt ]]; then
            echo "‚ùå summary.txt not found. Check logs for Generate AI Summary step."
            if [[ -f response_debug.txt ]]; then
              echo "‚ÑπÔ∏è API response:"
              cat response_debug.txt
            fi
            if [[ -f fetch_output.log ]]; then
              echo "‚ÑπÔ∏è Fetch output:"
              cat fetch_output.log
            fi
            exit 1
          fi
          BODY=$(gh pr view ${{ github.event.pull_request.number }} --json body -q .body)
          if [[ $? -ne 0 ]]; then
            echo "‚ùå Failed to fetch PR body."
            exit 1
          fi
          SUMMARY=$(cat summary.txt)
          NEW_BODY="### üß† AI-Generated Summary\n\n${SUMMARY}\n\n---\n\n${BODY}"
          echo -e "$NEW_BODY" | gh pr edit ${{ github.event.pull_request.number }} --body-file -
          echo "‚úÖ PR description updated."
        env:
          GH_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Clean up temporary files
        if: always()
        run: |
          rm -f pr_diff.txt summary.txt response_body.txt response_debug.txt fetch_output.log
